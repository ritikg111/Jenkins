def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger'
]
pipeline{
    agent any
    tools{

        maven 'MAVEN3'

    }
    environment{
        NEXUS_URL = '172.31.53.198:8081'
        NEXUS_CREDENTIALS_ID = 'nexus-login'
    }
    stages{
        stage('Fetch Source Code'){
            steps{

                git url: 'https://github.com/ritikg111/cicd-kubernetes.git' , branch: 'main'

            }
        }
        stage('Build Artifact'){
            steps{
                sh 'mvn clean install -DskipTests'
        }
        post{
            success{
                echo 'Archiving Artifact'
                archiveArtifacts artifacts: '**/*.war'
            }
        }
        }
        stage('Unit Test'){
            steps{
                sh 'mvn test'
            }
        }
        stage('Checkstyle Analysis'){
            steps{
                sh 'mvn checkstyle:checkstyle'
            }
        }
        stage('Sonar-scanner Code Analysis'){

                environment{
                    scanner = tool 'sonar4.7'
                }
        steps{
                withSonarQubeEnv('sonar-pro'){
                    sh '''${scanner}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                           -Dsonar.projectName=vprofile-repo \
                           -Dsonar.projectVersion=1.0 \
                           -Dsonar.sources=src/ \
                           -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                           -Dsonar.junit.reportsPath=target/surefire-reports/ \
                           -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                           -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''

                }
            }
        }
        stage('Quality Gate'){
            steps{
                timeout(time: 5, unit: 'MINUTES') {
                waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Upload Artifact to Nexus'){
            steps{
                nexusArtifactUploader (
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: "${NEXUS_URL}",
                    groupId: 'QA',
                    version: "v${BUILD_NUMBER}-${BUILD_TIMESTAMP}",
                    repository: 'vprofile',
                    credentialsId: "${NEXUS_CREDENTIALS_ID}",
                    artifacts: [
                        [artifactId: 'vprofile',
                         classifier: '',
                         file: 'target/vprofile-v2.war',
                         type: 'war']
                    ]
                )
            }
        }

    }
    post {
        always {

     slackSend(channel: '#jenkins-ci-pipeline', color: COLOR_MAP[currentBuild.result] , message: "Job_Name: ${JOB_NAME} \nBuild_Number: ${BUILD_NUMBER} \nBuild_URL: (${env.BUILD_URL}) \n${currentBuild.result}")
        }
    
    }
    }
